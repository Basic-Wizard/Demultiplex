1. Define the problem
    -writing an algorithm to de-multiplex files and report index-hopping
    -demultiplex reads by index-pair
2. Describe output
    outputting 52 total files:
    -one R1 FASTQ file per matching index-pair
    -one R2 FASTQ file per matching index-pair
    -two additional FASTQ files for non-matching index-pairs (index-hopping), 
    -two additional FASTQ files when one or both index reads are unknown or low quality 
        *unknown = does not match the 24 known indexes, index has a 'N', or does not meet a quality score cutoff.
3. Upload your [4 input FASTQ files](../TEST-input_FASTQ) and your [>=6 expected output FASTQ files](../TEST-output_FASTQ).
4. Pseudocode
```
    -Open all 4 files and read in parallel (will be looping through the records)
    -Read the sequence line of the nth record for all 4 files
    -Create set of 24 known indexes (forward/given)
    -Create 3 counters to keep track of number of reads going into each file: matched, unmatched, unknown
    -Collect all 4 lines of the record into 4 temporary arrays of size 4 (will save each line as a position in the array)
    -For each record:
        -if any base pair position has Qscore < 30 for either index --> unknown file, increment unknown counter
        -Check if any N's in the index 1 or index 2. If either containts an N --> unknown file, increment unknown counter
        -Check if index 1 in set:
            -if index 1 is not in the set --> unknown file, increment unknown counter
            -if index 1 in set --> continue filtering
                -Check if rev comp Index 2 is in set:
                    -If rec comp Index 2 not in set --> unknown file, increment unknown counter
                    -If rev comp Index 2 is in set --> check if matching
                        -Check if matching: does index 1 == rev comp index 2
                            -Yes --> index1_rcindex2_Read#.fq (matched files) (rcindex2 = reverse complement of Act2), , increment matched counter
                            -No --> unmatched file, increment unmatched counter  
```
5. High level functions. For each function, be sure to include:
    1. Description/doc string
        -Reverse complement function:
            ```Take in DNA sequence as input (5' - 3'). Return reverse complement of input sequence (5' - 3').```
    2. Function headers (name and parameters)
        def rev_comp(str: sequence) -> str
    3. Test examples for individual functions
            -Reverse complement function:
                rev_comp(AAGGTCTGA)
                    * input: AAGGTCTGA --> return: TCAGACCTT
                rev_comp(TGATTTTGCAGGA)
                    * input: TGATTTTGCAGGA --> return: TCCTGCAAAATCA
    4. Return statement
        -Reverse complement function: (rev_comp is a variable that I will be using in the function)
            return rev_comp